{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["Header","state","action","type","transactions","payload","filter","transaction","id","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","income","expenses","totalIncome","totalExpenses","className","Math","abs","Transaction","text","sign","onClick","TransactionList","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3a07a09.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = ()=>\r\n{\r\n    return (\r\n        <h2>\r\n            Expense Tracker\r\n        </h2>\r\n    );\r\n};\r\n\r\nexport default Header;","export default (state, action) => {\r\n  switch (action.type) {\r\n    case 'ADD_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: [action.payload,...state.transactions]\r\n      };\r\n    case 'DELETE_TRANSACTION':\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter((transaction) => {\r\n          return transaction.id !== action.payload;\r\n        }),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\nconst initialState = {\r\n  transactions: [],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  const deleteTransaction = (id)=>{\r\n    dispatch({\r\n      type: 'DELETE_TRANSACTION',\r\n      payload: id\r\n    });\r\n  }\r\n\r\n  const addTransaction = (transaction)=>{\r\n    dispatch({\r\n      type: 'ADD_TRANSACTION',\r\n      payload: transaction\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction, \r\n        addTransaction\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  const amounts = transactions.map((transaction) => transaction.amount);\r\n\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n  return (\r\n    <div>\r\n      <h4>Your Balance</h4>\r\n      <h1>${total}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n  const income = transactions.map((transaction) =>\r\n    transaction.amount > 0 ? transaction.amount : 0,\r\n  );\r\n  const expenses = transactions.map((transaction) =>\r\n    transaction.amount < 0 ? transaction.amount : 0,\r\n  );\r\n  const totalIncome = income.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n  const totalExpenses = expenses\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <div>\r\n        <h4>Income</h4>\r\n        <p className=\"money plus\">+${totalIncome}</p>\r\n      </div>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">-${Math.abs(totalExpenses)}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeExpenses;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst Transaction = ({ text, amount, id }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n  const sign = amount < 0 ? '-' : '+';\r\n  return (\r\n    <li className={amount < 0 ? 'minus' : 'plus'}>\r\n      {text}{' '}\r\n      <span>\r\n        {sign}${Math.abs(amount)}\r\n      </span>\r\n      <button className=\"delete-btn\" onClick={() => deleteTransaction(id)}>\r\n        x\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\nexport default Transaction;\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\nimport Transaction from './Transaction';\r\n\r\nexport default function TransactionList() {\r\n  const { transactions } = useContext(GlobalContext);\r\n  return (\r\n    <div>\r\n      <h3>History</h3>\r\n      <ul id=\"list\" className=\"list\">\r\n        {transactions.map((transaction) => {\r\n          return (\r\n            <Transaction\r\n              text={transaction.text}\r\n              amount={transaction.amount}\r\n              key={transaction.id}\r\n              id={transaction.id}\r\n            />\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nconst AddTransaction = () => {\r\n  const [text, setText] = useState('');\r\n  const [amount, setAmount] = useState(0);\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit=(e)=>{\r\n    e.preventDefault();\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 1000000),\r\n      text: text,\r\n      amount: +amount\r\n    }\r\n    addTransaction(newTransaction);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter text...\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Enter amount...\"\r\n          />\r\n        </div>\r\n        <button\r\n          className=\"btn\"\r\n        >\r\n          Add transaction\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n","import React from 'react';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpenses from './components/IncomeExpenses';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\nimport { GlobalProvider } from './context/GlobalState'\nimport './App.css';\n\nfunction App() {\n  return (\n    <GlobalProvider >\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeExpenses />\n        <TransactionList />\n        <AddTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}